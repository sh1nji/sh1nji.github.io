<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shinji Site</title>
  <subtitle>Record Learn and Life .</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.shinji.space/"/>
  <updated>2016-06-23T16:29:11.285Z</updated>
  <id>http://www.shinji.space/</id>
  
  <author>
    <name>Shinji</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git使用入门</title>
    <link href="http://www.shinji.space/2016/06/22/Git%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>http://www.shinji.space/2016/06/22/Git使用入门/</id>
    <published>2016-06-22T07:57:49.000Z</published>
    <updated>2016-06-23T16:29:11.285Z</updated>
    
    <content type="html">&lt;p&gt;这几天看了看Git的资料，重点看了廖学峰的个人主页，Git教程写得很不错，简明扼要，所以在这里归纳一下重点。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文重点参考廖学峰的个人主页，后续如果有新的发现会逐步加入进来。&lt;br&gt;廖学峰Git教程：&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击此处&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Git简介&quot;&gt;&lt;a href=&quot;#Git简介&quot; class=&quot;headerlink&quot; title=&quot;Git简介&quot;&gt;&lt;/a&gt;Git简介&lt;/h1&gt;&lt;p&gt;Git是分布式版本控制系统，Linus作为创始人于2005年完成。&lt;br&gt;在版本控制方面，除了分布式的Git还有集中式的CVS和SVN。&lt;br&gt;Git最大的又是不仅仅是分布式，还有强大的分支管理。&lt;/p&gt;
&lt;h2 id=&quot;初始化版本库&quot;&gt;&lt;a href=&quot;#初始化版本库&quot; class=&quot;headerlink&quot; title=&quot;初始化版本库&quot;&gt;&lt;/a&gt;初始化版本库&lt;/h2&gt;&lt;p&gt;版本库又名仓库，英文名repository，可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir learngit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; learngit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样创建一个版本库后，该目录下就会多出一个&lt;code&gt;.git&lt;/code&gt;的隐藏文件夹，该文件夹是Git来跟踪管理版本库的。&lt;/p&gt;
&lt;h2 id=&quot;添加文件到版本库&quot;&gt;&lt;a href=&quot;#添加文件到版本库&quot; class=&quot;headerlink&quot; title=&quot;添加文件到版本库&quot;&gt;&lt;/a&gt;添加文件到版本库&lt;/h2&gt;&lt;p&gt;将文件添加到版本库分两步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加文件到暂存区：&lt;code&gt;$ git add readme.txt&lt;/code&gt;，可反复多次使用，或一次添加多个文件&lt;/li&gt;
&lt;li&gt;将暂存区的数据提交到版本库：&lt;code&gt;$ git commit -m &amp;quot;wrote a readme file&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;数据增删改&quot;&gt;&lt;a href=&quot;#数据增删改&quot; class=&quot;headerlink&quot; title=&quot;数据增删改&quot;&gt;&lt;/a&gt;数据增删改&lt;/h1&gt;&lt;p&gt;可以通过&lt;code&gt;git status&lt;/code&gt;来查看版本库当前的状态，是否有改动过的数据，是否有提交到暂存区但未提交到版本库的数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;staged:改动过但未添加到暂存区的数数据，可以做如下操作：&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;git add &amp;lt;file&amp;gt;&lt;/code&gt;将数据提交到暂存区&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;git checkout -- &amp;lt;file&amp;gt;&lt;/code&gt;丢弃当前的修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;added:已添加到暂存区但未提交的数据&lt;/li&gt;
&lt;li&gt;untracked:不被Git控制的数据，如果该文件从未被&lt;code&gt;git add&lt;/code&gt;过，又不在&lt;code&gt;.gitignore&lt;/code&gt;指定的忽略列表中，则是untracked&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# On branch master&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Changes not staged for commit:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#   (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#   (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#    modified:   readme.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;no changes added to commit (use &lt;span class=&quot;string&quot;&gt;&quot;git add&quot;&lt;/span&gt; and/or &lt;span class=&quot;string&quot;&gt;&quot;git commit -a&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果需要查看该文件所做的修改，可以通过&lt;code&gt;git diff &amp;lt;file&amp;gt;&lt;/code&gt;来查看：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git diff readme.txt &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;diff --git a/readme.txt b/readme.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index 46d49bf..9247db6 100644&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- a/readme.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+++ b/readme.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@@ -1,2 +1,2 @@&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-Git is a version control system.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+Git is a distributed version control system.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Git is free software.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;版本回退&quot;&gt;&lt;a href=&quot;#版本回退&quot; class=&quot;headerlink&quot; title=&quot;版本回退&quot;&gt;&lt;/a&gt;版本回退&lt;/h2&gt;&lt;p&gt;在Git中查看历史记录，可以通过&lt;code&gt;git log&lt;/code&gt;来完成。&lt;br&gt;其中，最有用的信息就是commit id，如果只需要查看commit id，可以加上&lt;code&gt;--pretty=oneline&lt;/code&gt;参数：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit 3628164fb26d48395383f8f31179f24e0882e1e0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Author: Michael Liao &amp;lt;askxuefeng@gmail.com&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Date:   Tue Aug 20 15:11:49 2013 +0800&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    append GPL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit ea34578d5496d7dd233c827ed32a8&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;576c5ee85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Author: Michael Liao &amp;lt;askxuefeng@gmail.com&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Date:   Tue Aug 20 14:53:12 2013 +0800&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    add distributed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit cb926e7ea50ad11b8f9e909c05226233bf755030&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Author: Michael Liao &amp;lt;askxuefeng@gmail.com&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Date:   Mon Aug 19 17:51:55 2013 +0800&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wrote a readme file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; --pretty=oneline&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3628164fb26d48395383f8f31179f24e0882e1e0 append GPL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ea34578d5496d7dd233c827ed32a8&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;576c5ee85 add distributed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cb926e7ea50ad11b8f9e909c05226233bf755030 wrote a readme file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面开始讲讲版本回退的操作方法。&lt;/p&gt;
&lt;p&gt;在Git中，&lt;code&gt;HEAD&lt;/code&gt;表示当前版本，&lt;code&gt;HEAD^&lt;/code&gt;表示上一个版本，&lt;code&gt;HEAD^^&lt;/code&gt;表示上上个版本，&lt;code&gt;HEAD~100&lt;/code&gt;表示上100个版本。&lt;/p&gt;
&lt;p&gt;假如需要回退到上个版本，可以使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git reset --hard HEAD^&lt;/code&gt;：通过HEAD&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard ea34578d&lt;/code&gt;：通过commit id&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是改变HEAD指向的位置。&lt;/p&gt;
&lt;p&gt;如果回退到以前的版本后，需要恢复“未来”的版本，则可以通过&lt;code&gt;git reflog&lt;/code&gt;来获取commit id，然后恢复。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git reflog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ea34578 HEAD@&amp;#123;0&amp;#125;: reset: moving to HEAD^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3628164 HEAD@&amp;#123;1&amp;#125;: commit: append GPL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ea34578 HEAD@&amp;#123;2&amp;#125;: commit: add distributed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cb926e7 HEAD@&amp;#123;3&amp;#125;: commit (initial): wrote a readme file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;管理修改&quot;&gt;&lt;a href=&quot;#管理修改&quot; class=&quot;headerlink&quot; title=&quot;管理修改&quot;&gt;&lt;/a&gt;管理修改&lt;/h2&gt;&lt;p&gt;&lt;code&gt;git diff HEAD -- readme.txt&lt;/code&gt;命令可以查看工作区和版本库里面最新版本的区别：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git diff HEAD -- readme.txt &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;diff --git a/readme.txt b/readme.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index 76d770f..a9c5755 100644&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- a/readme.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+++ b/readme.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@@ -1,4 +1,4 @@&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Git is a distributed version control system.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Git is free software distributed under the GPL.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Git has a mutable index called stage.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-Git tracks changes.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+Git tracks changes of files.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;撤销修改&quot;&gt;&lt;a href=&quot;#撤销修改&quot; class=&quot;headerlink&quot; title=&quot;撤销修改&quot;&gt;&lt;/a&gt;撤销修改&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;git checkout -- &amp;lt;file&amp;gt;&lt;/code&gt;丢弃当前的修改，有两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;file&gt;自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；&lt;/file&gt;&lt;/li&gt;
&lt;li&gt;&lt;file&gt;已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。&lt;br&gt;总之就是让这个文件&lt;strong&gt;&lt;em&gt;回到最近一次&lt;/em&gt;&lt;/strong&gt;&lt;code&gt;git commit&lt;/code&gt;或&lt;code&gt;git add&lt;/code&gt;时的状态。&lt;/file&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;code&gt;git checkout -- &amp;lt;file&amp;gt;&lt;/code&gt;命令中的&lt;code&gt;--&lt;/code&gt;很重要，没有&lt;code&gt;--&lt;/code&gt;，就变成了“切换到另一个分支”的命令！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果在工作区内做了修改，且添加到了暂存区，可以用命令&lt;code&gt;git reset HEAD &amp;lt;file&amp;gt;&lt;/code&gt;可以把暂存区的修改撤销掉（unstage），&lt;strong&gt;&lt;em&gt;重新放回工作区&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git reset&lt;/code&gt;命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。&lt;/p&gt;
&lt;h2 id=&quot;删除文件&quot;&gt;&lt;a href=&quot;#删除文件&quot; class=&quot;headerlink&quot; title=&quot;删除文件&quot;&gt;&lt;/a&gt;删除文件&lt;/h2&gt;&lt;p&gt;如果需要删除文件，可以通过&lt;code&gt;git rm&lt;/code&gt;，然后&lt;code&gt;git commit&lt;/code&gt;来操作。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git rm test.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm &lt;span class=&quot;string&quot;&gt;&#39;test.txt&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git commit -m &lt;span class=&quot;string&quot;&gt;&quot;remove test.txt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[master d17efd8] remove test.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 1 file changed, 1 deletion(-)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; delete mode 100644 test.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果工作区的文件删错了，需要恢复到最新的版本库版本，可以通过&lt;code&gt;git checkout -- test.txt&lt;/code&gt;来实现。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout&lt;/code&gt;其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以一键还原。&lt;/p&gt;
&lt;h1 id=&quot;远程仓库&quot;&gt;&lt;a href=&quot;#远程仓库&quot; class=&quot;headerlink&quot; title=&quot;远程仓库&quot;&gt;&lt;/a&gt;远程仓库&lt;/h1&gt;&lt;p&gt;使用GitHub远程仓库，首先需要生成SSH Key，SSH Key会在指定目录下生成id_rsa和id_rsa.pub两个文件，一个私钥一个公钥，将公钥填写到GitHub上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入：&lt;code&gt;ssh-keygen.exe -t rsa -C &amp;quot;lzx911102@gmail.com&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;之后一路回车，使用默认值即可。&lt;br&gt;之后根据提示去id_rsa.pub里面找公钥，并将公钥填进GitHub。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;添加远程库&quot;&gt;&lt;a href=&quot;#添加远程库&quot; class=&quot;headerlink&quot; title=&quot;添加远程库&quot;&gt;&lt;/a&gt;添加远程库&lt;/h2&gt;&lt;p&gt;在GitHub上面创建一个名为learngit的Repository。&lt;/p&gt;
&lt;p&gt;如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：&lt;br&gt;&lt;code&gt;git remote add origin git@github.com:sh1nji/learngit.git&lt;/code&gt;&lt;br&gt;如此你就能够将你的改动推送到所添加的服务器上去了。&lt;/p&gt;
&lt;p&gt;接下来将本地的master分支推送到远程库上：&lt;code&gt;git push -u origin master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;由于远程库是空的，我们第一次推送&lt;code&gt;master&lt;/code&gt;分支时，加上了&lt;code&gt;-u&lt;/code&gt;参数，Git不但会把本地的&lt;code&gt;master&lt;/code&gt;分支内容推送的远程新的&lt;code&gt;master&lt;/code&gt;分支，还会把本地的&lt;code&gt;master&lt;/code&gt;分支和远程的&lt;code&gt;master&lt;/code&gt;分支关联起来，在以后的推送或者拉取时就可以简化命令。&lt;/p&gt;
&lt;p&gt;之后，只要本地作了提交，就可以通过&lt;code&gt;git push origin master&lt;/code&gt;把本地&lt;code&gt;master&lt;/code&gt;分支最新的修改推送至GitHub。&lt;/p&gt;
&lt;h2 id=&quot;从远程库克隆&quot;&gt;&lt;a href=&quot;#从远程库克隆&quot; class=&quot;headerlink&quot; title=&quot;从远程库克隆&quot;&gt;&lt;/a&gt;从远程库克隆&lt;/h2&gt;&lt;p&gt;若需要在本地克隆一份远程库，可输入如下命令：&lt;br&gt;&lt;code&gt;git clone git@github.com:sh1nji/learngit.git&lt;/code&gt;&lt;br&gt;Git将从远程下载，并在本地创建一个learngit文件夹。&lt;/p&gt;
&lt;p&gt;除了上面的这种方法外，还可以：&lt;code&gt;git clone https://github.com/sh1nji/learngit.git&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;分支管理&quot;&gt;&lt;a href=&quot;#分支管理&quot; class=&quot;headerlink&quot; title=&quot;分支管理&quot;&gt;&lt;/a&gt;分支管理&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Git创建一个分支很快，因为除了增加一个指针，改改HEAD的指向，工作区的文件都没有任何变化！&lt;br&gt;Git合并分支也很快！就改改指针，工作区内容也不变！&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建并切换分支：&lt;code&gt;git checkout -b dev&lt;/code&gt;&lt;br&gt;相当于下面两条命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git branch dev&lt;/code&gt;：创建dev分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout dev&lt;/code&gt;：切换分支&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;切换之后，查看当前分支，&lt;code&gt;git branch&lt;/code&gt;，*表示当前分支：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git branch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当我们修改完dev分支后，切换回master分支。&lt;br&gt;此时需要使用&lt;code&gt;git merge dev&lt;/code&gt;将dev分支的工作成果合并到master分支上：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git merge dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Updating d17efd8..fec145a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Fast-forward&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; readme.txt |    1 +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 1 file changed, 1 insertion(+)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是，上面这种合并方式为Fast-Forward，即直接把master指向dev的当前提交，但并不是每次都能Fast-Forward。&lt;br&gt;合并完成后，可以通过&lt;code&gt;git branch -d dev&lt;/code&gt;来删除dev分支：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git branch &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Deleted branch dev (was fec145a).&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;解决冲突&quot;&gt;&lt;a href=&quot;#解决冲突&quot; class=&quot;headerlink&quot; title=&quot;解决冲突&quot;&gt;&lt;/a&gt;解决冲突&lt;/h2&gt;&lt;p&gt;如果master和dev有各自的修改，则将dev合并到master中时就会有冲突，这时无法执行”快速合并”&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git merge feature1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Auto-merging readme.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CONFLICT (content): Merge conflict &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; readme.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Automatic merge failed; fix conflicts and &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; commit the result.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如上提示，有冲突，Git会将冲突的文件进行修改，标识哪些是有冲突的部分。&lt;br&gt;所以需要手动解决后提交(直接修改readme.txt的内容就行了)。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# On branch master&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Your branch is ahead of &#39;origin/master&#39; by 2 commits.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Unmerged paths:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#   (use &quot;git add/rm &amp;lt;file&amp;gt;...&quot; as appropriate to mark resolution)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#       both modified:      readme.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;no changes added to commit (use &lt;span class=&quot;string&quot;&gt;&quot;git add&quot;&lt;/span&gt; and/or &lt;span class=&quot;string&quot;&gt;&quot;git commit -a&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;提交后，我们可以使用&lt;code&gt;git log --graph --pretty=oneline --abbrev-commit&lt;/code&gt;查看分支的合并情况&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; --graph --pretty=oneline --abbrev-commit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*   d3b730a conflict fixed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| * 9b86cf7 modify dev branch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* | cfe731a modify master branch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 360f10a branch &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 307de1c add readme.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* f4a9bc5 Initial commit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;分支管理策略&quot;&gt;&lt;a href=&quot;#分支管理策略&quot; class=&quot;headerlink&quot; title=&quot;分支管理策略&quot;&gt;&lt;/a&gt;分支管理策略&lt;/h2&gt;&lt;p&gt;通常Git使用Fast-Forward进行合并，这种情况下，删除分支后，会丢掉分支信息。&lt;br&gt;如果禁用Fast-Forward，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。&lt;/p&gt;
&lt;p&gt;合并分支时，加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git merge --no-ff -m &amp;quot;merge with no-ff&amp;quot; dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后查看一下&lt;code&gt;git log --graph --pretty=oneline --abbrev-commit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在实际开发中，我们应该按照几个基本原则进行分支管理：&lt;br&gt;首先，&lt;code&gt;master&lt;/code&gt;分支应该是非常稳定的，也就是&lt;strong&gt;仅用来发布新版本，平时不能在上面干活&lt;/strong&gt;；&lt;br&gt;那在哪干活呢？干活都在&lt;code&gt;dev&lt;/code&gt;分支上，也就是说，&lt;strong&gt;&lt;code&gt;dev&lt;/code&gt;分支是不稳定的&lt;/strong&gt;，到某个时候，比如1.0版本发布时，再把&lt;code&gt;dev&lt;/code&gt;分支合并到&lt;code&gt;master&lt;/code&gt;上，在&lt;code&gt;master&lt;/code&gt;分支发布1.0版本；&lt;br&gt;&lt;strong&gt;你和你的小伙伴们每个人都在&lt;code&gt;dev&lt;/code&gt;分支上干活，每个人都有自己的分支，时不时地往&lt;code&gt;dev&lt;/code&gt;分支上合并就可以了&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Bug分支&quot;&gt;&lt;a href=&quot;#Bug分支&quot; class=&quot;headerlink&quot; title=&quot;Bug分支&quot;&gt;&lt;/a&gt;Bug分支&lt;/h2&gt;&lt;p&gt;Git提供了一个&lt;code&gt;stash&lt;/code&gt;功能，可以把当前工作现场储存起来，恢复后可以继续使用。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;git stash&lt;/code&gt;之后，工作区就是干净的，所以可以放心地创建分支来修复Bug。&lt;br&gt;恢复工作现场可以通过下面两种方式完成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git stash apply&lt;/code&gt;恢复，恢复后stash内容并不删除，需要用&lt;code&gt;git stash drop&lt;/code&gt;来删除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash pop&lt;/code&gt;，恢复的同时把stash内容也删了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过&lt;code&gt;git stash&lt;/code&gt;保存的现场可以通过&lt;code&gt;git stash list&lt;/code&gt;来查看。&lt;/p&gt;
&lt;p&gt;如果多次&lt;code&gt;stash&lt;/code&gt;，则恢复的时候，先用&lt;code&gt;git stash list&lt;/code&gt;查看，然后恢复指定的stash，&lt;code&gt;git stash apply stash@[0]&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#保存现场&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git stash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Saved working directory and index state WIP on dev: 6224937 add merge&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HEAD is now at 6224937 add merge&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#从dev回到master，再master基础上创建bug分支，之后整合到master上，并删除bug分支&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git checkout master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Switched to branch &lt;span class=&quot;string&quot;&gt;&#39;master&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Your branch is ahead of &lt;span class=&quot;string&quot;&gt;&#39;origin/master&#39;&lt;/span&gt; by 6 commits.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git checkout -b issue-101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Switched to a new branch &lt;span class=&quot;string&quot;&gt;&#39;issue-101&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git add readme.txt &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git commit -m &lt;span class=&quot;string&quot;&gt;&quot;fix bug 101&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[issue-101 cc17032] fix bug 101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 1 file changed, 1 insertion(+), 1 deletion(-)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git checkout master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Switched to branch &lt;span class=&quot;string&quot;&gt;&#39;master&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Your branch is ahead of &lt;span class=&quot;string&quot;&gt;&#39;origin/master&#39;&lt;/span&gt; by 2 commits.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git merge --no-ff -m &lt;span class=&quot;string&quot;&gt;&quot;merged bug fix 101&quot;&lt;/span&gt; issue-101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Merge made by the &lt;span class=&quot;string&quot;&gt;&#39;recursive&#39;&lt;/span&gt; strategy.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; readme.txt |    2 +-&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 1 file changed, 1 insertion(+), 1 deletion(-)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git branch &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; issue-101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Deleted branch issue-101 (was cc17032).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#回到dev分支&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git checkout dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Switched to branch &lt;span class=&quot;string&quot;&gt;&#39;dev&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# On branch dev&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nothing to commit (working directory clean)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#恢复现场，继续干活&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git stash list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stash@&amp;#123;0&amp;#125;: WIP on dev: 6224937 add merge&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git stash pop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# On branch dev&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Changes to be committed:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#   (use &quot;git reset HEAD &amp;lt;file&amp;gt;...&quot; to unstage)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#       new file:   hello.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Changes not staged for commit:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#   (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#   (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#       modified:   readme.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dropped refs/stash@&amp;#123;0&amp;#125; (f624f8e5f082f2df2bed8a4e09c12fd2943bdd40)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Feature分支&quot;&gt;&lt;a href=&quot;#Feature分支&quot; class=&quot;headerlink&quot; title=&quot;Feature分支&quot;&gt;&lt;/a&gt;Feature分支&lt;/h2&gt;&lt;p&gt;添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。&lt;/p&gt;
&lt;p&gt;如果要丢弃一个没有被合并过的分支，可以通过&lt;code&gt;git branch -D &amp;lt;name&amp;gt;&lt;/code&gt;强行删除&lt;/p&gt;
&lt;h2 id=&quot;多人协作&quot;&gt;&lt;a href=&quot;#多人协作&quot; class=&quot;headerlink&quot; title=&quot;多人协作&quot;&gt;&lt;/a&gt;多人协作&lt;/h2&gt;&lt;p&gt;当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。&lt;br&gt;要查看远程库的信息，用&lt;code&gt;git remote&lt;/code&gt;或&lt;code&gt;git remote -v&lt;/code&gt;显示更详细的信息(抓取和推送的origin地址)：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git remote&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;origin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git remote -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;origin  git@github.com:michaelliao/learngit.git (fetch)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;origin  git@github.com:michaelliao/learngit.git (push)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;推送分支&quot;&gt;&lt;a href=&quot;#推送分支&quot; class=&quot;headerlink&quot; title=&quot;推送分支&quot;&gt;&lt;/a&gt;推送分支&lt;/h2&gt;&lt;p&gt;推送分支使用&lt;code&gt;git push&lt;/code&gt;，可使用如下方法推送master分支和dev分支&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git push origin master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;抓取分支&quot;&gt;&lt;a href=&quot;#抓取分支&quot; class=&quot;headerlink&quot; title=&quot;抓取分支&quot;&gt;&lt;/a&gt;抓取分支&lt;/h2&gt;&lt;p&gt;当使用&lt;code&gt;git clone git@github.com:michaelliao/learngit.git&lt;/code&gt;时，默认情况下只能看到本地的master分支。&lt;br&gt;如果要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是用&lt;code&gt;git checkout -b dev origin/dev&lt;/code&gt;这个命令创建本地dev分支。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git checkout -b dev origin/dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git commit -m &lt;span class=&quot;string&quot;&gt;&quot;add /usr/bin/env&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git push origin dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Counting objects: 5, done.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Delta compression using up to 4 threads.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Compressing objects: 100% (2/2), done.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Writing objects: 100% (3/3), 349 bytes, done.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total 3 (delta 0), reused 0 (delta 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;To git@github.com:michaelliao/learngit.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;fc&lt;/span&gt;38031..291bea8  dev -&amp;gt; dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果其他人已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件做了修改，则会推送失败，因为有冲突。&lt;br&gt;解决办法也很简单：先用&lt;code&gt;git pull&lt;/code&gt;把最新的提交从origin/dev&lt;strong&gt;抓下来&lt;/strong&gt;，然后，在&lt;strong&gt;本地合并，解决冲突，再推送&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;但需要注意的是，&lt;code&gt;git pull&lt;/code&gt;前需要指定本地&lt;code&gt;dev&lt;/code&gt;分支与远程&lt;code&gt;origin/dev&lt;/code&gt;分支的关联。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git branch --set-upstream dev origin/dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Branch dev &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; up to track remote branch dev from origin.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git pull&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果&lt;code&gt;git pull&lt;/code&gt;提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令&lt;code&gt;git branch --set-upstream branch-name origin/branch-name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这就是多人协作的工作模式，一旦熟悉了，就非常简单。&lt;/p&gt;
&lt;h1 id=&quot;标签管理&quot;&gt;&lt;a href=&quot;#标签管理&quot; class=&quot;headerlink&quot; title=&quot;标签管理&quot;&gt;&lt;/a&gt;标签管理&lt;/h1&gt;&lt;p&gt;Git中创建标签很简单&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git tag &amp;lt;name&amp;gt;&lt;/code&gt;：打一个新标签&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag&lt;/code&gt;：查看所有标签&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag &amp;lt;name&amp;gt; &amp;lt;commit_id&amp;gt;&lt;/code&gt;，commit id可通过&lt;code&gt;git log&lt;/code&gt;获得。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看标签信息：&lt;code&gt;git show &amp;lt;tagname&amp;gt;&lt;/code&gt;&lt;br&gt;创建带有说明的标签，用&lt;code&gt;-a&lt;/code&gt;指定标签名，&lt;code&gt;-m&lt;/code&gt;指定说明文字：&lt;code&gt;git tag -a v0.1 -m &amp;quot;version 0.1 released&amp;quot; 3628164&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;另外也可以用PGP签名标签：&lt;code&gt;git tag -s &amp;lt;tagname&amp;gt; -m &amp;quot;blablabla...&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;标签操作&quot;&gt;&lt;a href=&quot;#标签操作&quot; class=&quot;headerlink&quot; title=&quot;标签操作&quot;&gt;&lt;/a&gt;标签操作&lt;/h2&gt;&lt;p&gt;删除标签：&lt;code&gt;git tag -d &amp;lt;tagname&amp;gt;&lt;/code&gt;&lt;br&gt;因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。&lt;/p&gt;
&lt;p&gt;如果要推送某个标签到远程，使用命令&lt;code&gt;git push origin &amp;lt;tagname&amp;gt;&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git push origin v1.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total 0 (delta 0), reused 0 (delta 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;To git@github.com:michaelliao/learngit.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * [new tag]         v1.0 -&amp;gt; v1.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者，使用&lt;code&gt;git push origin --tags&lt;/code&gt;,一次性推送全部尚未推送到远程的本地标签：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git push origin --tags&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Counting objects: 1, done.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Writing objects: 100% (1/1), 554 bytes, done.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total 1 (delta 0), reused 0 (delta 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;To git@github.com:michaelliao/learngit.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * [new tag]         v0.2 -&amp;gt; v0.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * [new tag]         v0.9 -&amp;gt; v0.9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果标签已经推送到远程，&lt;strong&gt;要删除远程标签就麻烦一点&lt;/strong&gt;，先从本地删除：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git tag &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; v0.9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Deleted tag &lt;span class=&quot;string&quot;&gt;&#39;v0.9&#39;&lt;/span&gt; (was 6224937)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后，从远程删除。删除命令也是push，但是格式如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git push origin :refs/tags/v0.9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;To git@github.com:michaelliao/learngit.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; - [deleted]         v0.9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;忽略特殊文件&quot;&gt;&lt;a href=&quot;#忽略特殊文件&quot; class=&quot;headerlink&quot; title=&quot;忽略特殊文件&quot;&gt;&lt;/a&gt;忽略特殊文件&lt;/h1&gt;&lt;p&gt;Git工作区的根目录下创建一个特殊的&lt;code&gt;.gitignore&lt;/code&gt;文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Windows:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Thumbs.db&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ehthumbs.db&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Desktop.ini&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后一步就是把&lt;code&gt;.gitignore&lt;/code&gt;也提交到Git，就完成了！&lt;/p&gt;
&lt;p&gt;可以用-f强制添加到Git：&lt;br&gt;&lt;code&gt;$ git add -f App.class&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果你发现可能是.gitignore写得有问题，需要找出来到底哪个规则写错了。&lt;br&gt;可以用&lt;code&gt;git check-ignore&lt;/code&gt;命令检查：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git check-ignore -v App.class&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.gitignore:3:*.class    App.class&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#第3行规则忽略了该文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;配置别名&quot;&gt;&lt;a href=&quot;#配置别名&quot; class=&quot;headerlink&quot; title=&quot;配置别名&quot;&gt;&lt;/a&gt;配置别名&lt;/h1&gt;&lt;p&gt;如果敲git st就表示git status那就简单多了，当然这种偷懒的办法我们是极力赞成的。&lt;/p&gt;
&lt;p&gt;我们只需要敲一行命令，告诉Git，以后st就表示status：&lt;br&gt;&lt;code&gt;$ git config --global alias.st status&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;配置一个git last，让其显示最后一次提交信息：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ git config --global alias.last &amp;#39;log -1&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;配置Git的时候，加上–global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。&lt;br&gt;配置文件放哪了？&lt;strong&gt;每个仓库的Git配置文件&lt;/strong&gt;都放在&lt;code&gt;.git/config&lt;/code&gt;文件中：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cat .git/config &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[core]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositoryformatversion = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    filemode = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bare = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logallrefupdates = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ignorecase = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    precomposeunicode = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[remote &lt;span class=&quot;string&quot;&gt;&quot;origin&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url = git@github.com:michaelliao/learngit.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fetch = +refs/heads/*:refs/remotes/origin/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[branch &lt;span class=&quot;string&quot;&gt;&quot;master&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    remote = origin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    merge = refs/heads/master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;alias&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    last = &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; -1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。&lt;/p&gt;
&lt;p&gt;而&lt;strong&gt;当前用户的Git配置文件&lt;/strong&gt;放在用户主目录下的一个隐藏文件.gitconfig中&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cat .gitconfig&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;alias&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    co = checkout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ci = commit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    br = branch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    st = status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[user]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name = Your Name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    email = your@email.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h1&gt;&lt;p&gt;以上就是Git的简明教程，后续如果有什么新发现或更好的总结，会不定期更新本文。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这几天看了看Git的资料，重点看了廖学峰的个人主页，Git教程写得很不错，简明扼要，所以在这里归纳一下重点。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文重点参考廖学峰的个人主页，后续如果有新的发现会逐步加入进来。&lt;br&gt;廖学峰Git教程：&lt;a href=&quot;http://w
    
    </summary>
    
      <category term="笔记" scheme="http://www.shinji.space/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Git" scheme="http://www.shinji.space/tags/Git/"/>
    
  </entry>
  
</feed>
